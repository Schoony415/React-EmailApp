{"ast":null,"code":"var _jsxFileName = \"/Users/j2153034/Documents/GitHub/react-app/react-checkpoint/src/MainDisp.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Email from \"./Email\"; //I had to do npm install to get dropdowns\n// import Dropdown from 'react-dropdown';\n// import 'react-dropdown/style.css';\n//for the radio buttons:\n//https://www.pluralsight.com/guides/how-to-use-radio-buttons-in-reactjs\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainDisp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      emailList: [],\n      address: props.address,\n      selectedEmail: {},\n      holdmybeer: \"\",\n      SearchType: \"\"\n    };\n    this.onChangeValue = this.onChangeValue.bind(this);\n  }\n\n  onChangeValue(event) {\n    console.log(event.target.value);\n    console.log(event.target);\n    console.log(event);\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  makeRequest() {\n    console.log(\"making request\");\n    fetch(this.state.address + \"emails\", {\n      method: 'GET'\n    }).then(response => {\n      console.log(response);\n      /*this is just my returned packet at this point*/\n\n      return response;\n      /* returning response because I'm still dealing with the packet in the next block */\n    }).then(response => {\n      if (response.ok) console.log(\"SUCCSESS!!\");else throw new Error(\"Request was bad: \" + response.status);\n      return response.json();\n      /*turning to json spits out the body from the packet*/\n    }).then(data => {\n      console.log(data);\n      /*this is now the body obj*/\n\n      this.setState({\n        emailList: data\n      });\n    }).catch(e => console.error(e));\n  }\n\n  clickEmail(email) {\n    //console.log(\"email!!!\", email)\n    this.setState({\n      selectedEmail: email\n    }); //.then(console.log(this.state.selectedEmail))\n  } //map: <li key={\"e\"+i}> {JSON.stringify(email)} </li>\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"--Main Disp--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          children: [\"Email Server: \", this.state.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)]\n      }, \"Header\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.makeRequest.bind(this),\n          children: \" Get Emails \"\n        }, \"getButton\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.setState({\n              selectedEmail: {}\n            });\n          },\n          children: \" Back \"\n        }, \"back\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.selectedEmail.id ? true : false,\n          onClick: () => {\n            console.log(\"Create Email\");\n          },\n          children: \" Create \"\n        }, \"create\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.selectedEmail.id ? false : true,\n          onClick: () => {\n            console.log(\"Delete Email\");\n          },\n          children: \" Delete \"\n        }, \"delete\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.emailList.length != 0 ? false : true,\n          onClick: () => {\n            this.setState({\n              selectedEmail: {},\n              emailList: []\n            });\n          },\n          children: \" GoodBye \"\n        }, \"hide\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)]\n      }, \"Primary Buttons\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            console.log(\"Sort by\", this.state.SearchType);\n          },\n          children: \" Search \"\n        }, \"search\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"search subject\"\n        }, \"searchText\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onChange: this.onChangeValue,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"Email\",\n            name: \"SearchType\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this), \" Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"Subject\",\n            name: \"SearchType\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this), \" Subject\"]\n        }, \"Search Buttons\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, \"Search Set\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"text\", {\n          children: \"Sort by:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"ID\",\n          name: \"SortType\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this), \" ID\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"Sender\",\n          name: \"SortType\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this), \" Sender\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"Subject\",\n          name: \"SortType\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this), \" Subject\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"Date\",\n          name: \"SortType\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), \" Date\"]\n      }, \"Sort Area\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 14\n      }, this), this.state.selectedEmail.id ? /*#__PURE__*/_jsxDEV(Email, {\n        view: \"long\",\n        email: this.state.selectedEmail\n      }, \"singleEmail\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this) : this.state.emailList.map((email, i) => /*#__PURE__*/_jsxDEV(Email, {\n        clicker: this.clickEmail.bind(this),\n        view: \"short\",\n        email: email\n      }, \"e\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this))]\n    }, \"mainReturn\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this);\n  }\n\n}\nMainDisp.propTypes = {\n  Truth: PropTypes.bool,\n  address: PropTypes.string\n};","map":{"version":3,"sources":["/Users/j2153034/Documents/GitHub/react-app/react-checkpoint/src/MainDisp.js"],"names":["React","Component","PropTypes","Email","MainDisp","constructor","props","state","emailList","address","selectedEmail","holdmybeer","SearchType","onChangeValue","bind","event","console","log","target","value","setState","name","makeRequest","fetch","method","then","response","ok","Error","status","json","data","catch","e","error","clickEmail","email","render","id","length","map","i","propTypes","Truth","bool","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Email from \"./Email\"\n//I had to do npm install to get dropdowns\n// import Dropdown from 'react-dropdown';\n// import 'react-dropdown/style.css';\n\n//for the radio buttons:\n//https://www.pluralsight.com/guides/how-to-use-radio-buttons-in-reactjs\n\nexport default class MainDisp extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            emailList: [],\n            address: props.address,\n            selectedEmail: {},\n            holdmybeer:\"\",\n            SearchType:\"\",\n        }\n        this.onChangeValue = this.onChangeValue.bind(this)\n    }\n\n    onChangeValue(event) {\n        console.log(event.target.value);\n        console.log(event.target);\n        console.log(event);\n        this.setState({[event.target.name]:event.target.value})\n      }\n\n    makeRequest() {\n        console.log(\"making request\")\n        fetch(this.state.address + \"emails\", { method: 'GET' })\n            .then(response => {\n                console.log(response); /*this is just my returned packet at this point*/\n                return response /* returning response because I'm still dealing with the packet in the next block */\n            })\n            .then(response => {\n                if (response.ok) console.log(\"SUCCSESS!!\");\n                else throw new Error(\"Request was bad: \" + response.status);\n                return response.json() /*turning to json spits out the body from the packet*/\n            })\n            .then(data => {\n                console.log(data)/*this is now the body obj*/\n                this.setState({ emailList: data })\n            })\n            .catch(e => console.error(e))\n    }\n\n    clickEmail(email) {\n        //console.log(\"email!!!\", email)\n        this.setState({ selectedEmail: email })\n        //.then(console.log(this.state.selectedEmail))\n    }\n\n\n    //map: <li key={\"e\"+i}> {JSON.stringify(email)} </li>\n    render() {\n        return (<div key=\"mainReturn\">\n            <div key=\"Header\">\n                <h2>--Main Disp--</h2>\n                <text>Email Server: {this.state.address}</text>\n            </div>\n            <fieldset key=\"Primary Buttons\">\n                <button key=\"getButton\" onClick={this.makeRequest.bind(this)}\n                > Get Emails </button>\n                <button key=\"back\"\n                    onClick={() => { this.setState({ selectedEmail: {} }) }}\n                > Back </button>\n                <button key=\"create\"\n                    disabled = {this.state.selectedEmail.id? true:false}\n                    onClick={() => { console.log(\"Create Email\") }}\n                > Create </button>\n                <button key=\"delete\"\n                    disabled = {this.state.selectedEmail.id? false:true}\n                    onClick={() => { console.log(\"Delete Email\") }}\n                > Delete </button>\n                <button key=\"hide\"\n                    disabled = {this.state.emailList.length!=0? false:true}\n                    onClick={() => { this.setState({ selectedEmail: {}, emailList: [] }) }}\n                > GoodBye </button>\n            </fieldset>\n            <fieldset key=\"Search Set\">\n                <button key=\"search\"\n                    onClick={() => { console.log(\"Sort by\",this.state.SearchType) }}\n                > Search </button>\n                <input key=\"searchText\" type=\"text\" placeholder=\"search subject\" />\n            <div key=\"Search Buttons\" onChange={this.onChangeValue}>\n                <input type=\"radio\" value=\"Email\" name=\"SearchType\" /> Email \n                <input type=\"radio\" value=\"Subject\" name=\"SearchType\" /> Subject \n            </div></fieldset>\n            <fieldset key=\"Sort Area\">\n                <text>Sort by:</text>\n                <input type=\"radio\" value=\"ID\" name=\"SortType\" /> ID\n                <input type=\"radio\" value=\"Sender\" name=\"SortType\" /> Sender \n                <input type=\"radio\" value=\"Subject\" name=\"SortType\" /> Subject \n                <input type=\"radio\" value=\"Date\" name=\"SortType\" /> Date \n            </fieldset>\n\n\n\n             <hr /> \n             {/*I need another if statement for the view to call <email/> with \"edit\" mode based on button click*/}\n            {this.state.selectedEmail.id ?\n                <Email key=\"singleEmail\"\n                    view=\"long\"\n                    email={this.state.selectedEmail}\n                />\n                :\n                this.state.emailList.map((email, i) =>\n                    <Email key={\"e\" + i}\n                        clicker={this.clickEmail.bind(this)}\n                        view=\"short\"\n                        email={email}\n                    />\n                )\n            }\n        </div>)\n    }\n}\n\nMainDisp.propTypes = {\n    Truth: PropTypes.bool,\n    address: PropTypes.string,\n\n}\n"]},"metadata":{},"sourceType":"module"}