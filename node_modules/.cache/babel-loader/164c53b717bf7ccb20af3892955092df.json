{"ast":null,"code":"var _jsxFileName = \"/Users/j2153034/Documents/GitHub/react-app/react-checkpoint/src/MainDisp.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Email from \"./Email\"; //I had to do npm install to get dropdowns\n// import Dropdown from 'react-dropdown';\n// import 'react-dropdown/style.css';\n//for the radio buttons:\n//https://www.pluralsight.com/guides/how-to-use-radio-buttons-in-reactjs\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sortWord(a, b) {\n  //doesn't consider case\n  if (a < b) {\n    return -1;\n  }\n\n  if (a > b) {\n    return 1;\n  } // names must be equal\n\n\n  return 0;\n}\n\nexport default class MainDisp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      emailList: [],\n      address: props.address,\n      selectedEmail: {},\n      //these will be created durring run time, idk if I need to say them\n      //the answer is no but it throws a hissy warning\n      SearchText: \"\",\n      SearchType: \"\",\n      SortType: \"ID\"\n    }; //shamelessly stolen but it works:\n\n    this.onChangeValue = this.onChangeValue.bind(this);\n  }\n\n  onChangeValue(event) {\n    //this is a rather cheeky function\n    // console.log(event.target.value);\n    console.log(event.target); // console.log(event);\n\n    this.setState({\n      [event.target.name]: event.target.value\n    }, () => {\n      //setState takes a callback function so this works\n      //we are checking for if we need to change sort\n      if (event.target.name == \"SortType\") this.SortEmail();\n    });\n  }\n\n  searchEmail() {\n    console.log(\"Search by\", this.state.SearchText, this.state.SearchType);\n  }\n\n  SortEmail() {\n    console.log(\"Sort by\", this.state.SortType);\n    var temp = this.state.emailList;\n\n    switch (this.state.SortType) {\n      case \"ID\":\n        temp.sort(function (a, b) {\n          return a.id - b.id;\n        });\n        break;\n\n      case \"Sender\":\n        temp.sort(function (a, b) {\n          console.log(\"a\");\n          return sortWord(a.sender, b.sender);\n        });\n        break;\n\n      case \"Subject\":\n        temp.sort(function (a, b) {\n          console.log(\"a\");\n          return sortWord(a.subject, b.subject);\n        });\n        break;\n    }\n\n    console.log(temp);\n    this.setState({\n      emailList: temp\n    });\n  }\n\n  makeRequest() {\n    console.log(\"making request\");\n    fetch(this.state.address + \"emails\", {\n      method: 'GET'\n    }).then(response => {\n      console.log(response);\n      /*this is just my returned packet at this point*/\n\n      return response;\n      /* returning response because I'm still dealing with the packet in the next block */\n    }).then(response => {\n      if (response.ok) console.log(\"Loaded Emails\");else throw new Error(\"Request was bad: \" + response.status);\n      return response.json();\n      /*turning to json spits out the body from the packet*/\n    }).then(data => {\n      console.log(data);\n      /*this is now the body obj*/\n\n      this.setState({\n        emailList: data\n      });\n    }).catch(e => console.error(e)); //check if there is a sort by and sort emails\n  }\n\n  clickEmail(email) {\n    //console.log(\"email!!!\", email)\n    this.setState({\n      selectedEmail: email\n    }); //.then(console.log(this.state.selectedEmail))\n  }\n\n  sortfunc() {\n    console.log(\"SORT\", this.state.SortType);\n  } //map: <li key={\"e\"+i}> {JSON.stringify(email)} </li>\n\n\n  render() {\n    console.log(\"r\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"Header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Generic Friendly Greeting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          children: [\"Email Server: \", this.state.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)]\n      }, \"Header\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"boxHolder\",\n        children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.makeRequest.bind(this),\n            children: \" Get Emails \"\n          }, \"getButton\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: this.state.selectedEmail.id ? false : true,\n            onClick: () => {\n              this.setState({\n                selectedEmail: {}\n              });\n            },\n            children: \" Back \"\n          }, \"back\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: this.state.selectedEmail.id ? true : false,\n            onClick: () => {\n              console.log(\"Create Email\");\n            },\n            children: \" Create \"\n          }, \"create\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: this.state.selectedEmail.id ? false : true,\n            onClick: () => {\n              console.log(\"Delete Email\", this.state.selectedEmail);\n            },\n            children: \" Delete \"\n          }, \"delete\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: this.state.emailList.length != 0 ? false : true,\n            onClick: () => {\n              this.setState({\n                selectedEmail: {},\n                emailList: []\n              });\n            },\n            children: \" GoodBye \"\n          }, \"hide\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this)]\n        }, \"Primary Buttons\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          disabled: this.state.emailList.length != 0 ? false : true\n          /* Button Click doesn't count as a change, so this is safe and gets rid of the below division */\n          ,\n          onChange: this.onChangeValue,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.searchEmail();\n            },\n            children: \" Search \"\n          }, \"search\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"SearchText\",\n            type: \"text\",\n            placeholder: \"search subject\"\n            /* onChange={this.onChangeValue} */\n\n            /*the web throws a warning without this here but ignore it as i'm onchanging the whole field set*/\n            ,\n            value: this.state.SearchText\n          }, \"searchText\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"Email\",\n            name: \"SearchType\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Email \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 72\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"Subject\",\n            name: \"SearchType\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Subject \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 74\n          }, this)]\n        }, \"Search Set\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          onChange: this.onChangeValue,\n          disabled: this.state.emailList.length != 0 ? false : true,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Sort by: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"ID\",\n            name: \"SortType\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" ID \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 66\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"Sender\",\n            name: \"SortType\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Sender \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 71\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"Subject\",\n            name: \"SortType\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Subject \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 72\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"Date\",\n            name: \"SortType\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Date \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 69\n          }, this)]\n        }, \"Sort Area\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), this.state.selectedEmail.id ? /*#__PURE__*/_jsxDEV(Email, {\n        view: \"long\",\n        email: this.state.selectedEmail\n      }, \"singleEmail\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this) : this.state.emailList.map((email, i) =>\n      /*#__PURE__*/\n\n      /*I think I have to sort before the map*/\n      _jsxDEV(Email, {\n        clicker: this.clickEmail.bind(this),\n        view: \"short\",\n        email: email\n      }, \"e\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this))]\n    }, \"mainReturn\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this);\n  }\n\n}\nMainDisp.propTypes = {\n  Truth: PropTypes.bool,\n  address: PropTypes.string\n};","map":{"version":3,"sources":["/Users/j2153034/Documents/GitHub/react-app/react-checkpoint/src/MainDisp.js"],"names":["React","Component","PropTypes","Email","sortWord","a","b","MainDisp","constructor","props","state","emailList","address","selectedEmail","SearchText","SearchType","SortType","onChangeValue","bind","event","console","log","target","setState","name","value","SortEmail","searchEmail","temp","sort","id","sender","subject","makeRequest","fetch","method","then","response","ok","Error","status","json","data","catch","e","error","clickEmail","email","sortfunc","render","length","map","i","propTypes","Truth","bool","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Email from \"./Email\"\n//I had to do npm install to get dropdowns\n// import Dropdown from 'react-dropdown';\n// import 'react-dropdown/style.css';\n\n//for the radio buttons:\n//https://www.pluralsight.com/guides/how-to-use-radio-buttons-in-reactjs\n\nfunction sortWord(a,b){ //doesn't consider case\nif (a < b) {\n  return -1;\n}\nif (a > b) {\n  return 1;\n}\n// names must be equal\nreturn 0;\n}\n\nexport default class MainDisp extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            emailList: [],\n            address: props.address,\n            selectedEmail: {},\n            //these will be created durring run time, idk if I need to say them\n            //the answer is no but it throws a hissy warning\n            SearchText: \"\",\n            SearchType: \"\",\n            SortType: \"ID\",\n        }\n        //shamelessly stolen but it works:\n        this.onChangeValue = this.onChangeValue.bind(this)\n    }\n\n    onChangeValue(event) { //this is a rather cheeky function\n        // console.log(event.target.value);\n        console.log(event.target);\n        // console.log(event);\n        this.setState( { [event.target.name]: event.target.value }, \n        ()=>{ //setState takes a callback function so this works\n            //we are checking for if we need to change sort\n            if(event.target.name==\"SortType\") this.SortEmail()\n        } )\n    }\n\n    searchEmail(){\n        console.log(\"Search by\", this.state.SearchText, this.state.SearchType)\n    }\n\n\n    SortEmail(){\n        console.log(\"Sort by\", this.state.SortType)\n        var temp = this.state.emailList\n        switch(this.state.SortType){\n            case \"ID\": temp.sort(function (a,b){return a.id - b.id}); break;\n            case \"Sender\": temp.sort(function(a,b){ console.log(\"a\");return sortWord(a.sender, b.sender)}); break;\n\n            case \"Subject\": temp.sort(function(a,b){ console.log(\"a\");return sortWord(a.subject, b.subject)}); break;\n        }\n        console.log(temp)\n        this.setState( { emailList: temp } )\n    }\n\n\n    makeRequest() {\n        console.log(\"making request\")\n        fetch(this.state.address + \"emails\", { method: 'GET' })\n            .then(response => {\n                console.log(response); /*this is just my returned packet at this point*/\n                return response /* returning response because I'm still dealing with the packet in the next block */\n            })\n            .then(response => {\n                if (response.ok) console.log(\"Loaded Emails\");\n                else throw new Error(\"Request was bad: \" + response.status);\n                return response.json() /*turning to json spits out the body from the packet*/\n            })\n            .then(data => {\n                console.log(data)/*this is now the body obj*/\n                this.setState({ emailList: data })\n            })\n            .catch(e => console.error(e))\n            //check if there is a sort by and sort emails\n    }\n\n    clickEmail(email) {\n        //console.log(\"email!!!\", email)\n        this.setState({ selectedEmail: email })\n        //.then(console.log(this.state.selectedEmail))\n    }\n\n    sortfunc() {\n        console.log(\"SORT\", this.state.SortType)\n    }\n\n\n    //map: <li key={\"e\"+i}> {JSON.stringify(email)} </li>\n    render() {console.log(\"r\")\n        return (<div key=\"mainReturn\" class=\"app\">\n            <div key=\"Header\" class=\"Header\">\n                <h2>Generic Friendly Greeting</h2>\n                <text>Email Server: {this.state.address}</text>\n            </div>\n            <div class=\"boxHolder\">\n            <fieldset key=\"Primary Buttons\">\n                <button key=\"getButton\" onClick={this.makeRequest.bind(this)}\n                > Get Emails </button>\n                <button key=\"back\"\n                    disabled={this.state.selectedEmail.id ? false : true}\n                    onClick={() => { this.setState({ selectedEmail: {} }) }}\n                > Back </button>\n                <button key=\"create\"\n                    disabled={this.state.selectedEmail.id ? true : false}\n                    onClick={() => { console.log(\"Create Email\") }}\n                > Create </button>\n                <button key=\"delete\"\n                    disabled={this.state.selectedEmail.id ? false : true}\n                    onClick={() => { console.log(\"Delete Email\", this.state.selectedEmail) }}\n                > Delete </button>\n                <button key=\"hide\"\n                    disabled={this.state.emailList.length != 0 ? false : true}\n                    onClick={() => { this.setState({ selectedEmail: {}, emailList: [] }) }}\n                > GoodBye </button>\n            </fieldset>\n            <fieldset key=\"Search Set\"\n                disabled={this.state.emailList.length != 0 ? false : true}\n                /* Button Click doesn't count as a change, so this is safe and gets rid of the below division */\n                onChange={this.onChangeValue}>\n                <button key=\"search\"\n                    onClick={() => { this.searchEmail() }}\n                > Search </button>\n                <input key=\"searchText\"\n                    name=\"SearchText\"\n                    type=\"text\"\n                    placeholder=\"search subject\"\n                    /* onChange={this.onChangeValue} *//*the web throws a warning without this here but ignore it as i'm onchanging the whole field set*/\n                    value={this.state.SearchText}\n                />\n                {/* I do not like that these are on a new line */}\n                {/* Dont forget there is a search endpoint, learn it */}\n                {/* this div is redundant if on change is above in field set*/}\n                {/* <div key=\"Search Buttons\" onChange={this.onChangeValue} > */}\n                <input type=\"radio\" value=\"Email\" name=\"SearchType\" /> <label> Email </label>\n                <input type=\"radio\" value=\"Subject\" name=\"SearchType\" /> <label> Subject </label>\n                {/* </div>*/}\n            </fieldset>\n            <fieldset key=\"Sort Area\" onChange={this.onChangeValue}\n                disabled={this.state.emailList.length != 0 ? false : true}>\n                <label>Sort by: </label>\n                <input type=\"radio\" value=\"ID\" name=\"SortType\" /><label> ID </label>\n                <input type=\"radio\" value=\"Sender\" name=\"SortType\" /> <label> Sender </label>\n                <input type=\"radio\" value=\"Subject\" name=\"SortType\" /> <label> Subject </label>\n                <input type=\"radio\" value=\"Date\" name=\"SortType\" /> <label> Date </label>\n            </fieldset>\n            </div>\n            \n            <hr />\n            {/*I need another if statement for the view to call <email/> with \"edit\" mode based on button click*/}\n            {this.state.selectedEmail.id ?\n            \n                <Email key=\"singleEmail\"\n                    view=\"long\"\n                    email={this.state.selectedEmail}\n                />\n            :\n                this.state.emailList.map((email, i) => /*I think I have to sort before the map*/\n                    <Email key={\"e\" + i}\n                        clicker={this.clickEmail.bind(this)}\n                        view=\"short\"\n                        email={email}\n                    />\n                )\n            }\n        </div>)\n    }\n}\n\nMainDisp.propTypes = {\n    Truth: PropTypes.bool,\n    address: PropTypes.string,\n\n}\n"]},"metadata":{},"sourceType":"module"}