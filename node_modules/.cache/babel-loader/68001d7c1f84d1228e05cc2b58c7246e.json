{"ast":null,"code":"var _jsxFileName = \"/Users/j2153034/Documents/GitHub/react-app/react-checkpoint/src/MainDisp.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Email from \"./Email\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainDisp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      emailList: [],\n      address: props.address,\n      selectedEmail: {}\n    };\n  }\n\n  makeRequest() {\n    console.log(\"making request\");\n    fetch(this.state.address + \"emails\", {\n      method: 'GET'\n    }).then(response => {\n      console.log(response);\n      /*this is just my returned packet at this point*/\n\n      return response;\n      /* returning response because I'm still dealing with the packet in the next block */\n    }).then(response => {\n      if (response.ok) console.log(\"SUCCSESS!!\");else throw new Error(\"Request was bad: \" + response.status);\n      return response.json();\n      /*turning to json spits out the body from the packet*/\n    }).then(data => {\n      console.log(data);\n      /*this is now the body obj*/\n\n      this.setState({\n        emailList: data\n      });\n    }).catch(e => console.error(e));\n  }\n\n  clickEmail(email) {\n    console.log(\"email!!!\");\n    this.setState({\n      selectedEmail: email\n    }).then(console.log(this.state.selectedEmail));\n  } //<li key={\"e\"+i}> {JSON.stringify(email)} </li>\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"--Main Disp--\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        children: [\"Email Server: \", this.state.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 60\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.makeRequest.bind(this),\n        children: \"Get Emails\"\n      }, \"getButton\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.setState({\n            selectedEmail: {}\n          });\n        },\n        children: \" Back\"\n      }, \"back\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.setState({\n            emailList: []\n          });\n        },\n        children: \" GoodBye\"\n      }, \"hide\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), this.state.selectedEmail ? this.state.emailList.map((email, i) => /*#__PURE__*/_jsxDEV(Email, {\n        clicker: this.clickEmail.bind(this),\n        view: \"short\",\n        email: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)) : /*#__PURE__*/_jsxDEV(Email, {\n        view: \"long\",\n        email: this.state.selectedEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)]\n    }, \"mainReturn\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this);\n  }\n\n}\nMainDisp.propTypes = {\n  Truth: PropTypes.bool,\n  address: PropTypes.string\n};","map":{"version":3,"sources":["/Users/j2153034/Documents/GitHub/react-app/react-checkpoint/src/MainDisp.js"],"names":["React","Component","PropTypes","Email","MainDisp","constructor","props","state","emailList","address","selectedEmail","makeRequest","console","log","fetch","method","then","response","ok","Error","status","json","data","setState","catch","e","error","clickEmail","email","render","bind","map","i","propTypes","Truth","bool","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Email from \"./Email\"\n\nexport default class MainDisp extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            emailList: [],\n            address: props.address,\n            selectedEmail: {},\n        }\n    }\n\n    makeRequest() {\n        console.log(\"making request\")\n        fetch(this.state.address + \"emails\", { method: 'GET' })\n            .then(response => {\n                console.log(response); /*this is just my returned packet at this point*/\n                return response /* returning response because I'm still dealing with the packet in the next block */\n            })\n            .then(response => {\n                if (response.ok) console.log(\"SUCCSESS!!\");\n                else throw new Error(\"Request was bad: \" + response.status);\n                return response.json() /*turning to json spits out the body from the packet*/\n            })\n            .then(data => {\n                console.log(data)/*this is now the body obj*/\n                this.setState({ emailList: data })\n            })\n            .catch(e => console.error(e))\n    }\n\n    clickEmail(email){\n        console.log(\"email!!!\")\n        this.setState({selectedEmail: email})\n        .then(console.log(this.state.selectedEmail))\n    }\n    \n\n    //<li key={\"e\"+i}> {JSON.stringify(email)} </li>\n    render() {\n        return (<div key=\"mainReturn\">\n            <h2>--Main Disp--</h2>\n            <text>Email Server: {this.state.address}</text><br />\n            <button key=\"getButton\" onClick={this.makeRequest.bind(this)}>Get Emails</button>\n            <button key=\"back\" onClick={() => { this.setState({ selectedEmail: {} }) }}> Back</button>\n            <button key=\"hide\" onClick={() => { this.setState({ emailList: [] }) }}> GoodBye</button>\n            <hr />\n            {this.state.selectedEmail?\n            this.state.emailList.map((email, i) =>\n                <Email\n                    clicker={this.clickEmail.bind(this)}\n                    view=\"short\"\n                    email={email} />\n            )\n            :\n            <Email view=\"long\" email={this.state.selectedEmail} />\n            }\n        </div>)\n    }\n}\n\nMainDisp.propTypes = {\n    Truth: PropTypes.bool,\n    address: PropTypes.string,\n\n}"]},"metadata":{},"sourceType":"module"}